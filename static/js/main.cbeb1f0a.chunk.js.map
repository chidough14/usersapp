{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","isModalVisible","setIsModalVisible","editIsModalVisible","setEditIsModalVisible","userIsModalVisible","setUserIsModalVisible","userModalText","setUserModalText","id","name","user","setUser","editData","setEditData","columns","title","dataIndex","key","render","text","onClick","showUserModal","style","cursor","record","size","type","showEditModal","danger","deleteRecord","filter","item","margin","width","marginBottom","dataSource","visible","closable","footer","hidden","console","log","map","disabled","onChange","e","target","value","uuidv1","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cbeb1f0a.chunk.js","sourcesContent":["/* import logo from './logo.svg';\nimport './App.css'; */\nimport { Table, Space, Button, Modal, Input } from 'antd'\nimport { useState } from 'react';\nimport { v1 as uuidv1 } from 'uuid';\n\n\n\n\nfunction App() {\n  const [data, setData] = useState([])\n  const [isModalVisible, setIsModalVisible] = useState(false)\n  const [editIsModalVisible, setEditIsModalVisible] = useState(false)\n  const [userIsModalVisible, setUserIsModalVisible] = useState(false)\n  const [userModalText, setUserModalText] = useState(\"\")\n  const [user, setUser] = useState({\n    id: \"\",\n    name: \"\"\n  })\n  const [editData, setEditData] = useState({\n    id: \"\",\n    name: \"\"\n  })\n\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      render: text => <p onClick={()=> showUserModal(text)} style={{cursor: \"pointer\"}}>{text}</p>,\n    },\n    \n    {\n      title: 'Action',\n      key: 'action',\n      render: (text, record) => (\n        <Space size=\"middle\">\n          <Button type=\"default\" onClick={()=> showUserModal(record.name)}>View</Button>\n          <Button type=\"primary\" onClick={()=> showEditModal(text, record)}>Edit</Button>\n          <Button type=\"primary\" danger onClick={()=> deleteRecord(text, record)}>Delete</Button>\n        </Space>\n      ),\n    },\n  ];\n\n  const showEditModal = (text, record) => {\n    setIsModalVisible(true)\n    setEditIsModalVisible(true)\n    setEditData({id: record.id, name: record.name})\n  }\n\n  const deleteRecord = (text, record) => {\n    setData(data.filter(item => item.id !== record.id))\n  }\n\n  const showModal = () => {\n    setIsModalVisible(true)\n  }\n\n  const showUserModal = (text) => {\n    setUserIsModalVisible(true)\n    setIsModalVisible(true)\n    setUserModalText(text)\n  }\n\n  const handleOk = () => {\n    setData([...data, user])\n    setIsModalVisible(false)\n    setUser({name: \"\"})\n  }\n\n  const handleEdit = (id) => {\n    setEditIsModalVisible(false)\n    setIsModalVisible(false)\n    console.log(editData)\n\n    setData(\n        data.map(item => \n            item.id === id\n            ? {...item, name : editData.name} \n            : item \n    ))\n  }\n\n  const handleCancel = () => {\n    setIsModalVisible(false)\n    setEditIsModalVisible(false)\n    setUser({name: \"\"})\n  }\n\n  return (\n    <div >\n      <div style={{ margin: \"auto\", width: \"800px\"}}>\n        <Button type=\"primary\" style={{marginBottom: \"20px\"}} onClick={showModal}>Add User</Button>\n        <Table columns={columns} dataSource={data} />\n      </div>\n\n      <Modal \n        title={editIsModalVisible ? \"Edit User\" : userIsModalVisible ? \"User Details\" : \"Add User\"} visible={isModalVisible}\n        closable={false}\n        footer={[\n          <Button key=\"cancel\"   onClick={handleCancel} hidden={userIsModalVisible ? true : false}>\n            Cancel\n          </Button>,\n          <Button key=\"ok\" type=\"primary\" onClick={editIsModalVisible ? ()=>handleEdit(editData.id) : userIsModalVisible ? ()=> {setIsModalVisible(false); setUserIsModalVisible(false)} : handleOk} disabled={user.name === \"\" && !editIsModalVisible && !userIsModalVisible ? true : false}>\n            Ok\n          </Button>,\n        ]}\n      >\n        {\n          userIsModalVisible ? <p>Name: {userModalText}</p> \n          : \n          <Input \n            onChange={editIsModalVisible ? (e)=> setEditData({id: editData.id, name: e.target.value}) : (e)=> setUser({id: uuidv1(), name: e.target.value})} \n            value={editIsModalVisible ? editData.name : user.name} \n          />\n        }\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}